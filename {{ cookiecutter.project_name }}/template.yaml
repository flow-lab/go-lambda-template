AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {{ cookiecutter.lambda_name }} 

  SAM Template for {{ cookiecutter.lambda_name }} - {{ cookiecutter.project_short_description }} 

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
{%- if cookiecutter.include_safe_deployment == "y" %}
    AutoPublishAlias: live # More info about Safe Deployments: https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
    DeploymentPreference:
        Type: Linear10PercentEvery1Minute {% endif %}
{% if cookiecutter.include_apigw == "y"%}
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true {% endif %}

Resources:
{%- if cookiecutter.include_sns == "y" %}
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "{{ cookiecutter.sns_topic_name }}"
      KmsMasterKeyId: "alias/aws/sns" {% endif %}

{% if cookiecutter.include_apigw == "y"%}
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./api.yml {% endif %}

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - ApiGateway
      - Function
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Function
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: {{ cookiecutter.lambda_name }}/
      Handler: {{ cookiecutter.lambda_name }}
      Runtime: go1.x
{%- if cookiecutter.include_xray == "y" %}
      Tracing: Active {% endif %} # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
{%- if cookiecutter.include_apigw == "y" %}
      Events:
        ApiGateway:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ALL {% endif %}
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
{%- if cookiecutter.include_sns == "y" %}
        Variables:
          SNS: !Ref SNSTopic {% endif %}

{%- if cookiecutter.include_sns == "y" %}
  LambdaFunctionSendToSNS:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: "send-to-sns"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action: "sns:Publish"
                  Resource: !Ref SNSTopic
        Roles:
            - !Ref FunctionRole {% endif %}

Outputs:
{% if cookiecutter.include_apigw == "y"%}
  API:
    Description: "API Gateway endpoint URL for Prod environment for {{ cookiecutter.lambda_name }}Function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod" {%- endif %}
{% if cookiecutter.include_sns == "y"%}
  SNS:
    Description: "SNS that all events will be send to"
    Value: !Ref SNSTopic {%- endif %}
  LambdaFunction:
    Description: "Function ARN for {{ cookiecutter.lambda_name }}Function"
    Value: !GetAtt Function.Arn
  FunctionRole:
    Description: "Implicit IAM Role created for {{ cookiecutter.lambda_name }} function"
    Value: !GetAtt FunctionRole.Arn
